<script>
	const Obj = {};
	browserCheck();
	// check if the brouser is netscape or ie
	function browserCheck() {
		const agent = navigator.userAgent.toLowerCase();
		//the browser is netscapre or IE
		if ((navigator.appName == 'Netscape' && agent.indexOf('trident') != -1) || (agent.indexOf("msie") != -1)) {
			// alert("Your browser is now an Explorer browser..");
			location.href = '/redirect-message';
		} else {

		};
	};

</script>

<script>
	

	const REGEX = {
		'NEW_LINE_REGEX': /\n+/,
		'WHITE_SPACE_REGEX': /\s/,
		'IP_ADDR_REGEX': /^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/,
		'HASH_REGEX': /^[a-z0-9+]{5,65}$/,
		'HEX_STR_REGEX': /^[a-fA-F0-9]+$/,
		// 'PW_STRONG_REGEX' : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})/,
		// 'PW_STRONG_REGEX' : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*[\s(|])(?=.*[!@#\$%\^&\*])(?=.{8,})/,
		'PW_STRONG_REGEX': /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?!.*[])(?=.*[!@#\$%\^&\*])(?=.{8,})/,
		'PW_MEDIUM_REGEX': /^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})/,
		'FINL_ADDR_REGEX': /^(FINL){1}[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{1, }$/,
		'PURE_ADDR_REGEX': /^(PURE){1}[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{1, }$/,
		'EMAIL_CHECK_REGEX': /^([0-9a-zA-Z_\.-]+)@([0-9a-zA-Z_-]+)(\.[0-9a-zA-Z_-]+){1,2}$/
	}


	/**
	 * check if its mobile or not
	 * @method Mobile Brouser detect
	 * @return check
	 */
	function mobileBrouser() {
		window.mobileCheck = function () {
			let check = false;
			(function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);
			return check;
		};
	}

	/**
	 * check if its mobile or not by width
	 * @method Mobile/PC detect
	 * @return 
	 */
	function detectMob() {
		return (window.innerWidth <= 800);
		//	return ( ( window.innerWidth <= 800 ) && ( window.innerHeight <= 600 ) );
	}

	/**
	 * Returns time in datetime format
	 * @method Mobile/PC detect
	 * @return 
	 */
	function getPullTime(milliseconds) {
		return moment(milliseconds).format('MM-DD-YY HH:mm:ss');  //'YYYY-MM-DD HH:mm:ss'
	};

	/**
	 * Returns shorten string 
	 * @method CheckMaxString
	 * @return string
	 */
	function CheckMaxString(string, maxNum) {
		if (!string) {
			return "";
		};

		let li_byte = 0, li_len = 0;

		for (let j = 0; j < string.length; j++) {
			escape(string.charAt(j)).length > 4 ? li_byte += 2 : li_byte++;

			if (li_byte <= maxNum) {
				li_len = li_byte <= maxNum && j + 1;
			};
		};

		return li_byte > maxNum ? string.substr(0, li_len) + "..." : string;
	};

	/**
	 * Returns SubnetID
	 * @method getSubnetId
	 * @return h2d(hub_p2p_addr)
	 */
	 function getSubnetId(hub_p2p_addr) {

		let li_str_len = hub_p2p_addr.length;
		//last 4 digit of hub_p2p_addr is BP name. So cut it to convert to hexa
		let hubP2pAddr = hub_p2p_addr.substr(li_str_len - 4, 4);

		return h2d(hubP2pAddr);
	};

	function base58(pubkey) {
		return addrEncode(pubkey);
	};

	const ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
	const FINA_PREFIX = "FINT";   //testnet

	/**
	 * Returns encoded addr from pubkey
	 * @method addrDecode
	 * @return {Object} Copy of ...
	 */
	function addrEncode(pubkey) {
		let pubkeyInt = BigInt("0x" + pubkey);
		let r = [];
		const carry = BigInt(ALPHABET.length);

		while (pubkeyInt > 0n) {
			r.unshift(ALPHABET[pubkeyInt % carry]);
			pubkeyInt /= carry;
		};

		return FINA_PREFIX + r.join('');
	};

	/**
	 * Returns decoded addr
	 * @method addrDecode
	 * @return {Object} Copy of ...
	 */
	function addrDecode(addr) {
		addr = addr.slice(0, 4) === FINA_PREFIX && addr.slice(4);

		let total = 0n;
		let base = 1n;

		for (let i = addr.length - 1; i >= 0; i--) {
			const n = ALPHABET.indexOf(addr[i]);
			if (n < 0) return false;
			total += base * BigInt(n);
			base *= BigInt(ALPHABET.length);
		};

		let pubkey = total.toString('16');

		if (pubkey.length < 66) {
			for (var i = 0; i < 66 - pubkey.length; i++) {
				pubkey = "0" + pubkey;
			};
		};

		return pubkey;
	};

	/**
	 * Returns number without 0
	 * @method leftZeroDelet
	 * @return {Object} Copy of ...
	 */
	const leftZeroDelet = string => {
		return string.replace(/(^0+)/, "");
	};

	/**
	 * Fired when an animateValue occurs...
	 * @event animateValue
	 * @param {String} msg A description of...
	 */
	function animateValue(obj, start, end, duration) {
		let startTimestamp = null;
		const step = (timestamp) => {
			if (!startTimestamp) startTimestamp = timestamp;
			const progress = Math.min((timestamp - startTimestamp) / duration, 1);
			let numberFomat = Math.floor(progress * (end - start) + start);
			obj.innerHTML = new Intl.NumberFormat().format(numberFomat);
			if (progress < 1) {
				window.requestAnimationFrame(step);
			}
		};
		window.requestAnimationFrame(step);
	}

	/**
	 * Returns number + Billion/Million/Kilo
	 * @method nFormatter
	 * @return {Object} Copy of ...
	 */
	function nFormatter(num) {
		if (num >= 1000000000) {
			return (num / 1000000000).toFixed(2).replace(/\.0$/, '') + 'Billion';
		}
		if (num >= 1000000) {
			const numberFomat = (num / 1000000).toFixed(0).replace(/\.0$/, '')
			const number = new Intl.NumberFormat().format(numberFomat)

			return number + 'Million';
		}
		if (num >= 1000) {
			return (num / 1000).toFixed(0).replace(/\.0$/, '') + 'Kilo';
		}
		return num;
	}

	/**
	 * copy string and use it by ctrl+v
	 * @event copy_to_clipboard
	 * @param {selctValue} 
	 */
	function copy_to_clipboard(selctValue) {

		let el = document.createElement('textarea');
		el.value = selctValue;
		el.setAttribute('readonly', '');
		el.style = {
			position: 'absolute',
			left: '-9999px'
		};
		document.body.appendChild(el);
		el.select();
		document.execCommand('copy');
		document.body.removeChild(el);

		//ref:https://kamranahmed.info/toast
		$.toast({
			text: "<span style='font-size:18px'>Copy to Clipboard</span>", // Text that is to be shown in the toast
			heading: '', // Optional heading to be shown on the toast
			icon: 'success', // Type of toast icon
			showHideTransition: 'fade', // fade, slide or plain
			allowToastClose: false, // Boolean value true or false
			hideAfter: 1000, // false to make it sticky or number representing the miliseconds as time after which toast needs to be hidden
			stack: 5, // false if there should be only one toast at a time or a number representing the maximum number of toasts to be shown at a time
			position: 'mid-center', // bottom-left or bottom-right or bottom-center or top-left or top-right or top-center or mid-center or an object representing the left, right, top, bottom values
			textAlign: 'center',  // Text alignment i.e. left, right or center
			loader: false,  // Whether to show loader or not. True by default
			loaderBg: '#ADFF2F',  // '#9EC600',  // Background color of the toast loader
			bgColor: '#98bf64',  /*'#74b72e'*/
			textColor: 'white',
			beforeShow: function () { }, // will be triggered before the toast is shown
			afterShown: function () { }, // will be triggered after the toat has been shown
			beforeHide: function () { }, // will be triggered before the toast gets hidden
			afterHidden: function () { }  // will be triggered after the toast has been hidden
		});

	};

	/**
	 * convert hexa to decimal
	 * @method hexa to decimal
	 * @return decimal value of hexa
	 */
	function h2d(s) {
		function add(x, y) {
			var c = 0, r = [];
			var x = x.split('').map(Number);
			var y = y.split('').map(Number);
			while (x.length || y.length) {
				var s = (x.pop() || 0) + (y.pop() || 0) + c;
				r.unshift(s < 10 ? s : s - 10);
				c = s < 10 ? 0 : 1;
			}
			if (c) r.unshift(c);
			return r.join('');
		}

		var dec = '0';
		s.split('').forEach(function (chr) {
			var n = parseInt(chr, 16);
			for (var t = 8; t; t >>= 1) {
				dec = add(dec, dec);
				if (n & t) dec = add(dec, '1');
			}
		});
		return dec;
	}


</script>